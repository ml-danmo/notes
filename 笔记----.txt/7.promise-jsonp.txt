promise对象：属于ES6的内容，基于promiseA+规范诞生的。
        promise对象的作用，解决异步编程的困扰。
        学习promise为后续学习的内容打下基础：axios、mongoose、async/await ...


    promise有三个状态：
         pending : 等待状态
         fulfilled : 成功状态
         rejected : 失败状态
         状态变化只有两种：当状态改变后，就不会再发生变化。
             pending -> fulfilled （ 如何触发状态变化呢？ resolve() ） -> then() 被触发
             pending -> rejected（ 如何触发状态变化呢？ reject() ）  ->  catch() 被触发

    var promise = new Promise(function(resolve , reject){     //创建一个promise对象出来
        setTimeout(function(){
            reject();
        },2000);
    });  


    promise.then(function(){     // 状态pending ,  pending -> fulfilled
        console.log(123);
    }).catch(function(){        // 状态pending ,  pending -> rejected
        console.log(456);  
    }); 


    var promise = new Promise(function(resolve , reject){    
        setTimeout(function(){
            //resolve(111,222);   // 参数只能传递一个
            reject(111,222);
        },2000);
    });  
    promise.then(function(reg,reg2){  
        console.log(reg,reg2);
    }).catch(function(reg,reg2){   
        console.log(reg,reg2);  
    }); 



    var promise = new Promise(function(resolve , reject){    
         setTimeout(function(){
             resolve(111,222);  // 参数只能传递一个
         },2000);
    });  
    //当第一个then()执行完毕，会创建一个新的promise对象，作为下一个then()使用
    //第一个then()中的return的值，可以作为新的promise对象中的resolve的参数
     promise.then(function(reg,reg2){  
         console.log(reg,reg2);
         return 222;         // 可以作为下一个then中的参数
     }).then(function(reg,reg2){  
         console.log(reg,reg2);
     });



    //promise在设计的时候，提供了容错的机制，catch()，一旦promise代码中出现错误，就会触发catch方法。
    var promise = new Promise(function(resolve , reject){    
        setTimeout(function(){
            resolve(); 
        },2000);
    });
    promise.then(function(){
        console.log('成功');
        a;                      //有catch() 就不会报错，代码就可以继续向下执行
    }).catch(function(){
        console.log('失败');
    });



    
    //JS中如果报错了，代码是不会向下执行的
    
    try{      // 容错的手段 ( 不要乱用，容易影响性能 )
        var a;
    }
    catch(err){  // 只有当try中代码出错的时候才会触发
        console.log(err);
    }



    function foo(){
        var promise = new Promise(function(resolve,reject){
            setTimeout(function(){
                resolve();
            },1000);
        });
        return promise;
    }
    foo().then(()=>{
        console.log(1);
        return foo();     //如果return 返回的是一个promise对象的话，那么会替换内置的新promise对象
    }).then(()=>{
        console.log(2);
        return foo();
    }).then(()=>{
        console.log(3);
    });


    //all() race() : 静态方法
    //then() catch() : 实例方法

    //all() : 表示所有的promise对象都成功，才会整体触发then() ，有一个返回失败，就会触发catch()方法
    //race()就是竞赛的意思，谁先改变了状态，就已谁为准触发then()或catch()。


async / await  : 也是解决异步调用顺序问题的。ES8，基于promise设计的。

    //await语法，要求后面接的是promise对象
    async function foo(){
        await bar(1);
        await bar(2);
        await bar(3);
        console.log(123);
    }
    foo();
    function bar(n){
        var promise = new Promise(function(resolve,reject){
            setTimeout(function(){
                console.log(n);
                resolve();
            },1000);
        });
        return promise;
    }


--------------------------------------------------------------------------------------

ajax不能去请求非当前服务器下的文件，存在跨域问题。
为什么会存在跨域问题？就是浏览器自身的安全限制（同源策略）。
        如何解决跨域问题？
            1. JSONP
            2. CORS
            3. 反向代理 

//JSONP : JSON + Padding , 把JSON数据进行内填充。
//JSONP方式的跨域操作，是利用了script标签不受同源策略的影响，可以利用script标签引入任意域下的文件，从而实现数据的请求。
//JSONP跟ajax没关系，是利用script标签实现的跨域，script标签本身就不存在跨域问题。

    function getJSON( url , fn){   //通过程序自动完成JSONP所有功能
        var script = document.createElement('script');
        var re = /callback=([^&]+)/;
        url = url.replace(re , 'callback=qf' + (new Date()).getTime()); // 产生随机的函数名，为了删除window下函数名不冲突。
        var fnName = url.match(re)[1];
        script.src = url;
        document.body.append(script);
        window[fnName] = fn;  // 把函数名与函数体结合在一起
        script.onload = function(){  //把数据获取到之后，标签就可以在页面中删掉了
            delete window[fnName];
            script.remove();
        };   
    }
    
    getJSON('http://localhost/20200723server/6_data.php?callback=?&id=123',function(data){
        console.log(data);
    });




















1. gulp工具介绍：

    可以做一些自动化的事情，比如 压缩代码、添加浏览器前缀、sass文件转换等等。

    gulp工具是基于node.js开发的，并且在node.js环境下去使用的。

    gulp工具只是开发阶段去使用，真正生产环境下是不使用的。

2. 安装Gulp工具：
	npm install --global gulp-cli   -> 可以在命令行中去使用 gulp
	npm install --save-dev gulp  ->  可以在代码中去使用 gulp 

3. 如何去用gulp执行任务？

    1. 先去创建一个 gulpfile.js 的文件，在这个文件中 去写执行的相关的任务。
        gulpfile.js -> 属于node.js下的文件( 属于后端的环境 )

    2. 开始写任务，一个任务就是一个函数（异步的，需要手动进行停止）

    3.下载他人传来的文件（没有传node-modules),自己下载node-modules：cnpm i


4. gulp工具的常见方法？

    src() : 创建一个流，用于从文件系统读取 Vinyl 对象（虚拟的文件格式）。  ✔
      
    dest() : 创建一个用于将 Vinyl 对象写入到文件系统的流。  ✔
       
    series() : 任务按顺序执行。   ✔
      
    parallel() : 任务同时执行。   ✔
      
    watch() : 监听文件改变并在发生更改时运行任务。 √  （ 类似 nodemon ）
      
    pipe() : 连接转换流或可写流。  ✔  ( 用这个方法可以实现gulp任务中的链式操作，简称管道 )

5. gulp的常见任务？

    CSS : gulp-sass、gulp-autoprefixer、gulp-cssmin

            gulp-sass : sass转css

            gulp-autoprefixer : 给css3添加浏览器前缀
                配置参数：{browsers:['last 2 versions'<最近的版本>,'Android >=4.0' , '>5%'<市场份额>] }

            gulp-cssmin : css代码进行压缩

            注：有的任务方法，是需要添加配置参数的。
            如果nodejs中有报错，需要在package.json文件中自行配置："browserslist":[">0%"]




    JavaScript : gulp-babel@7.0.0[babel-core babel-preset-es2015]、gulp-uglify、gulp-requirejs-optimize

                gulp-babel@7.0.0[babel-core babel-preset-es2015] : 把ES6转成ES5

                    （查看 gulp-babel 版本：cnpm view gulp-babel versions）

                    (下载7.0.0版本：cnpm i -D gulp-babel@7.0.0
                                    cnpm i -D babel-core
                                    cnpm i -D babel-preset-es2015
                    )

                    （配置参数： {presets:['es2015']} ）  //针对es6的代码进行转换

                gulp-uglify : JS进行压缩的 , 但是注意：ES6的代码是不能进行代码压缩的。如果想进行代码压缩，需要先把ES6的代码转成ES5的代码，然后再进行压缩。

                gulp-requirejs-optimize : 把requirejs的对应的模块合并成一个JS文件( 等到带着大家做项目的时候去说一下，怎么用 )



    html : gulp-htmlmin、gulp-file-include

                gulp-htmlmin : 对html文件进行压缩
                    配置属性：
                        {
                            collapseWhitespace:true,       //去除空格
                            removeEmptyAttributes:true,     //移除空的属性
                            minifyCSS:true,         //压缩 style 标签
                            minifyJS:true,          //压缩 script 标签
                            removeComments:true     //去除注释
                        }

                gulp-file-include : 把html拆分成代码片段，代码片段可以是一个独立的文件，这样可以对通用的代码进行复用。
                            // 配置属性：
                            {
                                prefix:"@",   //要引入代码片段的标识符（标识符是自定义的）
                                basepath:'./html/template'      //代码片段的根目录
                            }

    其它：gulp-webserver、gulp-clean、gulp-if、gulp-concat、gulp-rename

                gulp-rename : 对文件进行重新命名

                gulp-clean : 对dist文件夹进行清理(执行具体任务前，先去删除dist文件)

                gulp-concat : 单纯的对文件进行合并操作的。也可以合并css，js文件

                gulp-if : 对要执行的任务做判断

                gulp-webserver : 利用gulp来开启一个web服务器（前端的服务器）
                        配置属性：
                        {
                            host:'localhost',   //本地域名
                            port:4000,          //端口
                            open:'./index.html',    //open是会自动把url在浏览器打开
                            livereload:true  //热更新，在不刷新浏览器的时候也能自动更新变化
                        }

                练习：回去自己试一试如何把多个css文件合并到一起？



---------gulpfile.js---------------------------------------------------------------------------------------------

//一个函数就是一个任务，任务函数是一个异步的，任务要想结束，必须调用停止操作。
//停止任务操作：cb回调函数,stream流


//series按顺序   parallel同时 src读取流->通过pipe->用dest写入流
var {series , parallel,src , dest ,watch} = require("gulp");
var sass = require('gulp-sass');   //将scss文件转换成css文件
var autoprefixer = require('gulp-autoprefixer');   //给css3添加浏览器前缀
var cssmin  = require('gulp-cssmin')  //压缩css
var rename  = require('gulp-rename')  //重命名
var clean  = require('gulp-clean')  // 对dist文件夹进行清理(执行具体任务前，先去删除dist文件)
var babel  = require('gulp-babel')  // es6转es5

var uglify  = require('gulp-uglify')  //gulp-uglify : JS进行压缩的
var concat  = require('gulp-concat') //文件合并


var htmlmin  = require('gulp-htmlmin') //压缩html文件
var fileInclude  = require('gulp-file-include') //把html拆分成代码片段，代码片段可以是一个独立的文件，这样可以对通用的代码进行复用。


var gulpIf  = require('gulp-if')//gulp-if: 对要执行的任务做判断
var webserver  = require('gulp-webserver')//利用gulp来开启一个web服务器（前端的服务)


//----css文件------------------------------------------------------------------

function oneTask(cb){
    console.log(11111111);
    cb();
}
function twoTask(cb){
    console.log(222);
    cb();
}

//读文件并将其写到指定的文件夹下
function fileTask(){
    return src('./a.txt').pipe(dest('dist'));
}

//读文件，将scss文件转换成css文件，并将其写到指定的文件夹下
function sassTask(){  
    return src('./css/*.scss')   //*统配，css文件下的所有scss
    .pipe(sass())   //通过pipe 调用scss方法将其转换为css
    .pipe(dest('dist'))  //再次通过pipe方法，将转换之后的文件通过dest写入dist文件夹下
}

//给css3添加浏览器前缀
function autoTask(){  
    return src('./css/*.css')   //*统配，css文件下的所有scss
    .pipe(sass())
    .pipe(autoprefixer(
        {browsers:['>0%'] }  //当市场份额大于0%的（所有的）浏览器都需要添加哪些浏览器前缀
    ))   //通过pipe 调用scss方法将其转换为css
    .pipe(dest('dist'))  //再次通过pipe方法，将转换之后的文件通过dest写入dist文件夹下
}

//一个工程中可以进行多个操作
//将scss文件转换成css文件,然后给css3添加浏览器前缀
function sassAndAutoTask(){  
    return src('./css/*.scss') 
    .pipe(sass())  
    .pipe(autoprefixer())   
    .pipe(dest('dist'))  
}

//压缩css
function scssminTask(){  
    return src('./css/*.css') 
    .pipe(cssmin())    
    .pipe(rename(function(path){
        //console.log(path)
        //通过修改basename来进行重命名
        path.basename = path.basename +'.min';
    }))    
    .pipe(dest('dist1'))  
}


function cleanTask(){
    return src('dist1',{allowEmpty:true})  //allowEmpty:表示忽略找不到的文件，这样就不会报错
    .pipe(clean());
}

//------js文件------------------------------------------------------------

// es6转es5
function babelTask(){
    return src('./js/*.js')
    .pipe(babel({
        presets:['es2015']   //针对es6的代码进行转换
    }))
    .pipe(dest('dist1'));
}


//gulp-uglify : JS进行压缩的，ES6的代码是不能进行代码压缩的。如果想进行代码压缩，需要先把ES6的代码转成ES5的代码，然后再进行压缩。
function uglifyTask(){
    return src('./js/*.js')
    .pipe(babel({
        presets:['es2015']   //针对es6的代码进行转换
    }))
    .pipe(uglify())
    .pipe(dest('dist2'))
}


//单纯的对文件进行合并操作的。也可以合并css文件
function concatTask(){
    return src(['./js/a.js','./js/b.js'])
    .pipe(concat('all.js'))   //合并成的文件名
    .pipe(dest('dist2'))
}

//---html文件----------------------------------------------------------------------------

//压缩html文件
function htmlminTask(){
    return src('./html/*.html')
    .pipe(htmlmin({
        collapseWhitespace:true,       //去除空格
        removeEmptyAttributes:true,     //移除空的属性
        minifyCSS:true,         //压缩 style 标签
        minifyJS:true,          //压缩 script 标签
        removeComments:true     //去除注释
    }))
    .pipe(dest('dist1'))
}

//把html拆分成代码片段，代码片段可以是一个独立的文件，这样可以对通用的代码进行复用。
function fileIncludeTask(){
    return src('./html/*.html')
    .pipe(fileInclude(
        {
            prefix:"@",   //要引入代码片段的标识符（标识符是自定义的）
            basepath:'./html/template'      //代码片段的根目录
        }
    ))
    .pipe(dest('dist3'))
}


//-----其他---------------------------------------------------------------

//gulp-if: 对要执行的任务做判断
//利用gulp-if可以在任务当中来实现 生成 和 开发两个阶段的不同操作
var argv = process.argv;
var build = argv[argv.length-1];
function ifTask(){  
    return src('./css/*.scss')  
    .pipe(sass())   
    .pipe(gulpIf( build=='--build' ),cssmin())
    .pipe(dest('dist'))  
}


function webserverTask(){  //开启一个web服务的任务
    return src('dist3')     //指定服务器的根目录
    .pipe(webserver({
        host:'localhost',   //本地域名
        port:4000,          //端口
        open:'./index.html',    //open是会自动把url在浏览器打开
        livereload:true  //热更新，在不刷新浏览器的时候也能自动更新变化
    })) 
}

//watch() : 监听文件改变并在发生更改时运行任务。 √  （ 类似 nodemon ）
function watchTask(){
    watch('./html/*.html',fileIncludeTask)   //一旦html文件发生变化，就会触发对应的任务
    watch('./css/*.scss',sassTask)
}

module.exports = {          //对外提供接口
    //oneTask:oneTask
    //default:oneTask            //当名字是default的时候，命令行调用的时候是可以省略任务的名字
    //allTask:parallel(oneTask , twoTask)
    //fileTask
    // sassTask,
    // autoTask,
    // sassAndAutoTask,
    // scssminTask,
    // cleanTask
    // scssminTask:series(cleanTask,scssminTask),//先删除，在生成
    // babelTask,
    // uglifyTask,
    // concatTask,
    // htmlminTask,
    // fileIncludeTask:series(cleanTask,fileIncludeTask),
    // ifTask:series(cleanTask,ifTask),
    // webserverTask:series(cleanTask,fileIncludeTask,webserverTask),
    webserverTask:series(cleanTask,fileIncludeTask,parallel( watchTask,webserverTask )),

}      


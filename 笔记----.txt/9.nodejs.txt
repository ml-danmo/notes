Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。 
    
        Node.js : 并不是编程语言。他是JS的运行环境。

        Chrome V8 就是浏览器的引擎。C++编写的，是计算机底层用的，把V8放到浏览器中，JS就可以在前端运行起来了。

        V8放到了Node.js中，JS就可以在后端运行起来了。

    
    Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。
    
        作者看重的是JS的单线程的能力。解决高并发需求的。

            一般公司里后端会实现两层的架构。

            前端 ->  Node端（解决高并发） ->  Java端（实现复杂的后端需求）
    
    
    Node.js 的包管理器 npm，是全球最大的开源库生态系统。

        Node.js : 看做是一个手机
        npm : 手机里的商店
        npm全球最大的开源库生态系统：（JS环境下）
            纯前端模块： jquery.js  bootstrap.js
            纯后端模块： express.js  koa.js  mongoose.js
            前后端都能用的模块：moment.js  axios.js

    

    Node.js如何安装和启动？
                1. 去官网下载  node.msi文件
                2. 命令行窗口 -> cmd  -> node -v -> 如果能看到node版本说明安装成功了

            通过 npm 去下载模块 , https://www.npmjs.com/ -> 国外的仓库（ 下载会稍微慢一些 ）

            淘宝特别好，做了一个镜像，在国内架设了一个仓库，每隔10分钟去同步一下npm仓库。

            打开cmd 执行 npm install -g cnpm --registry=https://registry.npm.taobao.org

            cnpm : 跟 npm 用法是一样的，只不过下载的时候走淘宝镜像。

            wamp -> 有可视化的界面
            node -> 命令行窗口操作

                    cd cd ..      进入目录、跳出目录

                        快速进入某个文件夹：1. 目录下输入cmd  2.shift + 右键

                    上下键     查看输入历史记录

                    tab键        自动补全内容
                    
                    ctrl + c      退出操作( 向后执行 )
                    
                    cls              清屏
                    
                    dir              显示文件
       
            

            window10 -> 可以用快捷键
            window7 -> 不能用快捷键   编辑 -> 标记 -> 右键进行复制，右键进行粘贴。





---------------------------------------------------------------------------------------------------------
npm的安装模块的命令

        npm install -g cnpm --registry=https://registry.npm.taobao.org
        cnpm install -g nodemon 

        nodejs->cmd打开 -> node 文件名 回车 -> 对应文件打印值
        nodejs->cmd打开 -> nodemon 文件名 回车 -> 对应文件打印值    //（实时监听）

        install 安装 ，简写 i
        --global 全局 , 简写 -g

        全局安装的模块，一般都是通过命令行进行使用的。 而如果这个第三方模块是在文件中进行使用的一般安装在局部环境下。
        
        当局部安装的时候，会自动生成一个node_modules文件夹，装载着下载好的所有第三方局部模块




-------------------------------------------------------------------------------------------------------------

        //var foo = 123;
        //module.exports = foo;          //提供了一个对外的接口

        /* var foo = require('./a.js');  //地址一定要写相对的路径
        console.log( foo ); */


        var foo = 123;
        var bar = 456;
        module.exports = { foo , bar };   //把多个接口提供出去

        /* var obj = require('./a.js');     //接受一个对象
        console.log( obj.foo );
        console.log( obj.bar ); */

        //var { foo , bar } = require('./a.js');            //或者解构赋值
        //console.log( foo );
        //console.log( bar );



        //console.log( module );  // 会得到当前模块对应的一些辅助信息




        -------------------------------引入第三块模块--------------------------------------

        //引入第三方模块的时候，不需要写路径，只要写模块的名字就可以。
            var moment = require('moment');
            moment.locale('zh-cn');
            var date = new Date();
            console.log( moment(date).fromNow() );
            console.log( moment(date).format('MMMM Do YYYY, h:mm:ss a') );



        -------------------------------引入内置模块-------------------------------------------------------


        //引入内置模块，无需下载，直接引入模块的名字就可以。

        var url = require('url');                    // url 模块用于处理与解析 URL。
        var querystring = require('querystring');  // 模块提供用于解析和格式化 URL 查询字符串的实用工具。

            var str = 'https://www.baidu.com:8080/goods/detail.html?name=iphone&price=4000#list';
            console.log(url.parse(str));
            console.log(url.parse(str,true));   //第二个参数：作用是可以让query以对象的形式展示
            console.log(url.parse(str,true).query.name);   //第二个参数：作用是可以让query以对象的形式展示

                 Url {
                     protocol: 'https:',                    //协议
                     slashes: true,                         //是否有双斜线
                     auth: null,            //权限
                     host: 'www.baidu.com:8080',        //域名+端口
                     port: '8080',      //端口
                     hostname: 'www.baidu.com',     //域名
                     hash: '#list',                 //#后的内容
                     search: '?name=iphone&price=4000',        //？后的内容
                     query: 'name=iphone&price=4000',               //？后的内容，且不带？
                     pathname: '/goods/detail.html',                //文件路径
                     path: '/goods/detail.html?name=iphone&price=4000',     //路径+数据
                     href:
                    'https://www.baidu.com:8080/goods/detail.html?name=iphone&price=4000#list'
                     }



                     var obj = {
                            protocol: 'https:',
                            slashes: true,
                            auth: null,
                            host: 'www.baidu.com:8080',
                            port: 8080,
                            hostname: 'www.baidu.com',
                            hash: '#list',
                            search: '?name=iphone&price=4000',
                            query: 'name=iphone&price=4000',
                            pathname: '/goods/detail.html',
                            path: '/goods/detail.html?name=iphone&price=4000',
                            href: 'https://www.baidu.com/goods/detail.html?name=iphone&price=4000#list'
                        }
                        console.log( url.format(obj) );  // 跟 url().parse()是一个相反的操作方法


                        //var str = 'name=iphone&price=4000';
                        //console.log( querystring.parse(str) );  // { name: 'iphone', price: '4000' }

                        //var obj = { name: 'iphone', price: '4000' };
                        //console.log( querystring.stringify(obj) );  // 'name=iphone&price=4000'
                        //console.log( querystring.stringify(obj,'@') );  // 'name=iphone@price=4000'
                        //console.log( querystring.stringify(obj,'@','-') );  // 'name-iphone@price-4000'


                        var str = 'name-iphone@price-4000';
                        console.log( querystring.parse(str) );  // { 'name-iphone@price-4000': '' }
                        console.log( querystring.parse(str,'@','-') );  // { name: 'iphone', price: '4000' }



-------------------------------------------全局语法-----------------------------------------------------------

            //关于DOM的相关语法，在node中是找不到的    都会报错
            /* console.log(document);                   
            console.log(window);
            console.log(document.querySelector); */


            //console.log(process);  //进程
            //console.log(global);  //全局对象，所有的JS语法都在global对象下。


            //前后端都能用的
            /* var arr = [];
            var date = new Date();
            var re = /a/;
            var str = 'aaa';  // 字符串方法
            function foo(){}
            if(){}  for(){}  运算符 数据类型 */
            /* setInterval(function(){
                console.log(123);
            },1000); */


            //process : 进程 , 开启一个软件就是一个进程，每一个进程里面有很多线程。
                //作用：让代码有能力去控制软件的一些行为，比如软件的输入输出、软件的开启和关闭。


            //console.log( process.argv );  // 得到命令行当前运行的代码，返回一个数组结构
                    /* [
                        'C:\\Program Files\\nodejs\\node.exe',
                        'D:\\ke\\qf_dl202003\\20200731\\4_全局语法.js'
                        ] */

            /* console.log( process.pid );  //当前进程的唯一标识

            setInterval(()=>{},1000);

            setTimeout(()=>{
                process.exit();          //退出进程
            },10000); */

            //node中如何添加事件 -> on()

            /* process.on('exit',function(){
                console.log('已经退出了当前进程');
            }); */

            //stdout、stdin : 进程的输入输出

            //console.log(123);   相当于->  process.stdout.write('123');
            //process.stdout.write('123');

            process.stdin.on('data',function(info){      //监听输入
                //console.log(info);   //<Buffer 68 65 6c 6c 6f 0d 0a> -> 得到的就是二进制的数据流
                console.log( info.toString() );  // 可以把buffer转成一个正常的字符串
            });




            --------fs模块-----------------------------------------------------------------------------------

        fs模块：操作文件的模块。         var fs = require('fs');

               
                //读取文件信息 , readFile() 异步操作的方法
                 fs.readFile('./aaa.txt',function(err,info){
                     err : 文件读取是否出错，返回null没有错误；返回对象，有错误。
                     if(err){
                         console.log('读取文件出错');
                         return;
                     }
                     console.log(info.toString());
                 });


                //readFileSync() : 同步去读取文件
                /* var text = fs.readFileSync('./aaa.txt');
                console.log( text.toString() ); */

                同步去处理错误的方式
                /* try{
                    var text = fs.readFileSync('./bbb.txt');
                    console.log( text.toString() );
                }
                catch(err){
                    console.log('读取文件出错');
                } */


                 注：如果采用异步的相关方法，都必须要写回调


                fs.writeFile('./aaa.txt','hi mengmeng!',(err)=>{});   //写
                当写入的文件不存在的时候，会先去创建文件再写入。
                fs.writeFile('./bbb.txt','hi mengmeng!',(err)=>{});


                对文件进行重命名 第一个参数是原来名，第二个参数是替换的名字自
                fs.rename('bbb.txt','ccc.txt',(err)=>{});   //重命名

                //创建文件夹
                fs.mkdir('myapp',(err)=>{});

                读取文件夹
                /* fs.readdir('module',(err,info)=>{
                    console.log(info);   //[ 'a.js', 'b.js' ]
                }); */


                //读取文件信息
                /* fs.stat('1_node.js',(err,info)=>{
                    console.log(info);
                }); */





--------------package.json--------------------------------------------------------------------------------------------
            
             全局模块：在命令行中使用 -> cnpm  nodemon
             局部模块：在代码中使用的 -> moment  ->  require('moment');


             如果想开发一个node项目：
                 1. 先去创建一个package.json -> 项目的说明书

                     devDependencies : 写入用到了哪些第三方模块 ( 只是开发环境用到的，生产环境是不会用到的 )
                         npm i xxx.js --save-dev ->  npm i xxx.js -D
                     dependencies : 写入用到了哪些第三方模块（开发环境和生产环境都要用到的 jquery）
                         npm i xxx.js --save  ->  npm i xxx.js -S
                    
                     删除安装过的模块 : npm uninstall xxx.js -S 

                         npm install : 会根据package.json中的信息，去批量的下载第三方模块。
                    
                     scripts : 写脚本的 , 通过 npm run [name] 

                             name : start stop test -> npm [name]


                 2. npm init 创建 package.json
             	        npm init -y  快速创建package.json






-----------------http爬虫----------------------------------------------------------------------------------

        var http = require('http');          //内置模块
        var https = require('https');       //内置模块
        var cheerio = require('cheerio');   ////cheerio : 类似于JQ，在Node中去使用的。

        // https.get("https://www.lagou.com/",function(req){ //     请求的对象
        //     var result = '';
        //     req.on('data',function(chunk){
        //         console.log(chunk);        // 分段爬取
        //         result+=chunk;     
        //     })
        //     req.on('end',function(){
        //         console.log(result)
        //     })

        // })



        https.get("https://www.lagou.com/",function(req){ //     请求的对象
            var result = '';
            req.on('data',function(chunk){
                //console.log(chunk);
                result+=chunk;
            })
            req.on('end',function(){
                
                var $ = cheerio.load(result);
                console.log($('.mainNavs .menu_box h2').text().trim().toString())
            })

        })




        // https.get("https://m.maoyan.com/ajax/filterCinemas?ci=42&optimus_uuid=13B9A000F97A11EAADF681F59044BF193C3B427C77E94D73BF5012C316E0E5BB&optimus_risk_level=71&optimus_code=10",function(req){ //     请求的对象
        //     var result = '';
        //     req.on('data',function(chunk){
        //         //console.log(chunk);
        //         result+=chunk;
        //     })
        //     req.on('end',function(){
        //         var data = JSON.parse(result).brand.subItems;
        //         data.forEach(i => {
        //             console.log(i.name)
        //         });
                
        //     })

        // })



--------------------通过http模块创建服务器--------------------------------------------------------------------------------

通过http模块创建服务器

        如果我们使用PHP来编写后端的代码时，需要Apache 或者 Nginx 的HTTP 服务器，来处理客户端的请求相应。不过对 Node.js 来说，概念完全不一样了。使用 Node.js 时，我们不仅仅在实现一个应用，同时还实现了整个 HTTP 服务器。
        1、引入http模块
        var http = require("http");
        2、创建服务器 接下来我们使用 http.createServer() 方法创建服务器，并使用 listen 方法绑定 8888 端口。 函数通过 request, response 参数来接收和响应数据。
                 
                //引用模块
                var http = require('http');
                //创建一个服务器，回调函数表示接收到请求之后做的事情
                http.createServer(function(req,res){
                    res.writeHead(200,{"Content-Type":"text/html;charset=utf-8"});
                    
                    res.write("呵呵");

                    res.end("你好，隔壁的老王");

                //监听端口
                }).listen(8888);
                
                console.log("hahaha");


        浏览器运行：127.0.0.1：8888
        呵呵你好，隔壁的老王

        你会发现，我们本地写一个js，打死都不能直接拖入浏览器运行，但是有了node，我们任何一个js文件，都可以通过node来运行。也就是说，node就是一个js的执行环境。
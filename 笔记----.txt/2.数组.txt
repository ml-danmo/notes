数组是相同数据类型的元素按一定顺序排列的集合。

    var arr = [1,2,3];
    console.log( arr.length );     数组的长度  3
    console.log(  arr[1]  );    2

    /* var arr = ['a','b','c','d'];
    for(var i=0;i<arr.length;i++){
        console.log( arr[i] );
    } */

元素集合  arguments 类数组（伪数组），没有数组方法的。

数组写法的扩展

    var arr = []; -> var arr = new Array();
    var arr = new Array();
     var arr = [];      数组的类型：对象
     arr.myColor = 'red';
     console.log( arr.myColor );

    var arr = new Array(3);     诡异的一个值 [,,] , 建议大家创建数组都用 []
    console.log( arr );

多维数组

    /* var arr = [ 
        ['a','b'] , ['c','d'] 
    ];

    console.log(  arr[1][0]  ); */      [1]外面的数组 [0]里面的数组

    var arr = ['a','b'];  
    arr[1] = 'c';      可以直接进行赋值操作的
    arr[3] = 'c';   ['a','b',,'c']
    console.log( arr );

arr.length = 0;    快速的清空一个数组
     arr.length = 10;
     console.log(arr);
    总结：长度和下标不仅可以获取也可以设置


    -------------------------------------------------------
数组是有方法的
添加起始位置与结束位置的子项：unshift()、 push()
删除起始位置与结束位置的子项： shift()、pop()

    var arr = ['a','b','c','d'];
(1)    arr.push('e');      就是往数组的最后添加子项
    console.log( arr );    ['a','b','c','d','e'];

    var arr = ['a','b','c','d'];
    var a = arr.push('e','f');      就是往数组的最后添加子项
    console.log( arr );    ['a','b','c','d','e'];
    console.log( a );       push()执行完的结果，会返回数组的长度
    注：会改变原数组 ( 变异数组方法 )

     /* var str = 'hello';
    var a = str.substring(1,3);
    console.log( str );
    console.log( a ); */

    var arr = ['a','b','c','d'];
(2)    var a = arr.unshift('e','f');  往数组的起始添加子项
    console.log(arr);

    var arr = ['a','b','c','d'];
(3)    var a = arr.pop();      不写参数 , 从数组最后删除一项
    console.log( arr );
    console.log( a );       pop()执行完的结果，返回删除的那一项
    
    var arr = ['a','b','c','d'];
(4)    var a = arr.shift();    不写参数 , 从数组起始删除一项
    console.log( arr );

    var button = document.querySelector('button');
    var div = document.querySelector('div');
    var arr = ['a','b','c','d'];

    div.innerHTML = arr;    内部的实现 console.log( String(arr) );

    button.onclick = function(){

        /* var value = arr.shift();

        arr.push( value );

        div.innerHTML = arr; */

        arr.push( arr.shift() );
        div.innerHTML = arr;

    };






截取数组 : slice() : 不会改变原数组的
    
    var arr = ['a','b','c','d'];        起始位置和结束位置（不包含结束位置）
    
    var a = arr.slice( 1 , 3 );
    

合并数组成字符串：join() , 参数就是用什么字符去连接成字符串
       var arr = ['a','b','c','d'];
       console.log( arr.join('') );  abcd
       console.log( arr.join() );  a,b,c,d , join()默认就是用逗号连接




splice()  删除或添加或替换现有子项          注：会改变原数组（变异方法）
        
    splice()执行的返回结果：被删除元素，并且得到一个数组
    push() unshift() pop() shift() : 只能操作起始和结束

    var arr = ['a','b','c','d'];

  第一个参数：起始位置 ， 第二个参数：删除的个数

     var a = arr.splice( 1 , 2 );

     console.log( arr );
     console.log( a );

    var arr = ['a','b','c','d'];
     第三个参数开始，就是添加的子项（位置是起始位置的前面）
    arr.splice( 1 , 0 , 'e','f');
    console.log( arr );

    arr.splice( 1 , 2 , 'e','f');
    console.log( arr );


合并多个数组为一个数组：concat()

     var a = ['a','b'];
     var b = ['c','d'];
     var c = ['e'];

    console.log( a + b );   a,b  +  c,d

    console.log(  a.concat(b , c)  );

    console.log(  a.concat('hello')  );   其他类型的子项也可以合并到数组里


查找数组子项的位置：indexOf()、lastIndexOf()

    var arr = ['a','b','c','d'];

    console.log( arr.indexOf('b') );   1
    console.log( arr.indexOf('w') );   -1

console.log( arr.includes('c') );    布尔值，是否包含



数组反转与排序： reverse()、sort()

     var arr = ['a','b','c','d'];
     var a = arr.reverse();
     console.log( arr );   变异方法
     console.log( a );   结果就是反转的数组

排序 : sort()

    /* var arr = [4,2,8,1,12,34,2];
    var a = arr.sort();

    console.log( arr );    变异方法 , 默认从小到大 , 按位一位一位的比较
    console.log( a );    结果就是排序后的数组 */
排序 : sort() : 自定义排序方式
        通过给sort添加一个函数作为参数来实现自定义排序规则
            函数中的两个参数：n1,n2
                数组中的任意两个值
                当函数返回负值，两个值的位置不变
                当函数返回正值，两个值的位置切换

     var arr = [4,2,8,1,12,34,2];

     arr.sort(function(n1,n2){
        
         /* if( n1 > n2 ){
             return -100000;
         }
         else if(n1 < n2){
             return 10000;
         }
         else{
             return 0;
         } */
         return n1 - n2;
     });

     console.log( arr );

                        var arr = ['red','yellow','blue','green','black','white'];
                        arr.sort(function(n1,n2){
                            return n1.length - n2.length;
                        });

                        console.log( arr ); */   按字符串长度排序





------------------------------------------------------------------------------------------------------------------------------
//map()：返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值。
        //map() : 是不能改变原数组的，回调函数可能被调用多次。
            //注：map()主要目的是映射一个新数组出来
        
   /*  var arr = [1,2,3,4];

    var newArr = arr.map(function(value,index,arr){
        // v 1 , 2, 3, 4 每一项
        // i 0 1 2 3 下标
        // a 整体数组
        //console.log(v);  
        return i - 1;


    var newArr2 = arr.map(function(v,i,a){
        // v 1 , 2, 3, 4 每一项
        // i 0 1 2 3 下标
        // a 整体数组
        return v ** 2;
    });

    console.log( newArr );
    console.log( newArr2 ); */

    /* function foo(n1){

    }

    foo(1,2,3); */

    //------------------------------------

//filter()：检测数值元素，并返回符合条件所有元素的数组。
        // 注：得到一个过滤后的数组

    // var arr = [1,2,3,5,6,7,4,1,2,5,7,8];

    // var newArr = arr.filter(function(v,i,a){
    //     //return v > 4;  //一旦条件为真，就会得到对应的子项，为假就过滤掉这个子项
    //     return v % 2 == 0;
    // });
    // console.log( newArr );

    //------------------------------------

//find()：返回通过测试（函数内判断）的数组的第一个元素的值
        // 注：只会返回一个值，就是第一个满足条件的
    /* var arr = [1,2,3,5,6,7,4,1,2,5,7,8];
    var findValue = arr.find(function(v,i,a){
        return v > 4;  
    });
    console.log( findValue ); */

    //------------------------------------

//forEach()：数组每个元素都执行一次回调函数。 
        // 注：跟循环功能类似（区别：它只能给数组用，伪数组不能用）

    /* var arr = ['a','b','c','d'];
    arr.forEach(function(v,i,a){
        console.log(v);
    }); */


    //------------------------------------

//reduce()：将数组元素计算为一个值（从左到右）
        //注：结果就是一个值（就是把数组的每一项合到一起）
//reduceRight()：将数组元素计算为一个值（从右到左）

    // var arr = [1,2,3,4,5];

    // /* var newValue = arr.reduce(function(n1,n2){
    //     // 第一次的时候：n1 -> 1 n2 -> 2
    //     // 第二次的时候：n1 -> return上一次的值 n2 -> 3
    //     return n1 - n2;
    // });

    // console.log( newValue ); */

    // var newValue = arr.reduceRight(function(n1,n2){
    //     // 第一次的时候：n1 -> 5 n2 -> 4
    //     // 第二次的时候：n1 -> return上一次的值 n2 -> 3
    //     return n1 - n2;
    // });

    // console.log( newValue );

    
    //------------------------------------

/* every()：检测数值元素的每个元素是否都符合条件。
        注：结果是一个布尔值 , 都满足就是真，有一个不满足就是假

some()： 检测数组元素中是否有元素符合指定条件。
        注：结果是一个布尔值 , 有一个满足条件就是真，除非都不满足条件就是假
        */

    /* var arr = [6,10,4,7];

    var isBol = arr.some(function(v,i,a){
        return v > 100;
    });  
    
    console.log(isBol); */